#!/usr/bin/env python
# coding: utf-8
"""

openstack command wrapper in some older version openstack.

author: zhang, junhui
date: 2016.09.21

"""

import os
import re
import json
import argparse
import sqlalchemy
from prettytable import PrettyTable

ARGS = None


class FailException(Exception):
    pass


def parse_opt():
    parser = argparse.ArgumentParser(description="openstack cmd.")
    parser.add_argument('component', help="component")
    parser.add_argument('sub_cmd', help="sub_cmd")
    parser.add_argument('args', nargs="*", help='other args')
    parser.add_argument('-f', '--format', dest="format",
                        help="output format")
    parser.add_argument('--long', dest="long", action='store_true',
                        help="not useful")
    parser.add_argument("--parent-region")
    parser.add_argument("--description", default="")
    parser.add_argument("--name")
    parser.add_argument("--enable", action='store_true')
    parser.add_argument("--disable", action='store_true')
    parser.add_argument("--region")
    args = parser.parse_args()
    return args


def command(cmd):
    def _command():
        return os.popen(cmd).read()
    return _command


def singleton(cls, *args, **kw):
    instances = {}

    def _singleton():
        if cls not in instances:
            instances[cls] = cls(*args, **kw)
        return instances[cls]
    return _singleton


@singleton
class DB_session(object):
    def __init__(self, connection_str=None):
        self.connection = connection_str if connection_str is not None else \
                     os.popen("grep ^connection= /etc/keystone/keystone.conf | "
                              "awk -F = '{print $2}'").read()
        self.engine = sqlalchemy.create_engine(self.connection)
        from sqlalchemy.orm import sessionmaker
        self.session = sessionmaker(bind=self.engine)()

    def __getattr__(self, item):
        return getattr(self.session, item)

    def __del__(self):
        self.session.close()


def get_keystone_sql():
    connection = os.popen("grep ^connection= /etc/keystone/keystone.conf | "
                          "awk -F = '{print $2}'").read()
    match = re.match(r"mysql://([^:]+):([^@]+)@([^/]+)/(\w+)", connection)
    if match:
        return match.groups()
    return None


def get_sql_cmd(sql):
    if sql:
        cmd = "mysql -t -u %s --password=%s -h %s -D %s" % sql
    else:
        cmd = None
    return cmd


def pretty_table(rows):
    table = PrettyTable(rows[0])
    for row in rows[1:]:
        table.add_row(row)
    return table.get_string()


def get_region():
    session = DB_session()
    ret = session.execute('select id, parent_region_id, '
                          'description from region')
    rows = [("Region", "Parent Region", "description")]
    rows.extend(ret.fetchall())
    return pretty_table(rows)
    # cmd = get_sql_cmd(get_keystone_sql())
    # cmd = "%s -e 'select id as Region, parent_region_id as \"Parent Region\", description from region'" % cmd
    # return os.popen(cmd).read()


def add_region():
    region = ARGS.args[0]
    parent_region = '"%s"' % ARGS.parent_region if ARGS.parent_region\
                    else "NULL"
    description = ARGS.description
    session = DB_session()
    session.execute('''INSERT INTO region (id, parent_region_id, extra, description) VALUES ("%s",%s,"%s","%s") ''' % (region, parent_region, "{}", description))
    session.commit()
    return "add Region %s successful" % region
    # cmd = get_sql_cmd(get_keystone_sql())
    # cmd = '''%s -e 'INSERT INTO region (id, parent_region_id, extra, description) VALUES ("%s","%s","%s","%s")' ''' % (cmd, region, parent_region, "{}", description)
    # if os.system(cmd) == 0:
    #     return "add Region %s successful" % region
    # else:
    #     raise FailException("add Region %s fail" % region)


def add_service():
    service_name = ARGS.name
    service_type = ARGS.args[0]
    description = ARGS.description
    cmd = 'keystone service-create --name %s --type %s %s' % (service_name, service_type, '-description "%s"' % description if description else "")
    if os.system(cmd) == 0:
        return "add Service %s successful" % service_type
    else:
        raise FailException("add Service %s fail" % service_type)


interface_dict = {
    "public": 0,
    "internal": 1,
    "admin": 2
}


def add_endpoint():
    region = ARGS.region
    service = ARGS.args[0]
    interface_index = interface_dict[ARGS.args[1]]
    url = ARGS.args[2]
    urls = ["http://NULL", "http://NULL", "http://NULL"]
    cmd = "keystone endpoint-list | grep %s | grep `keystone service-get %s | awk -F\| '{if($2~\" *id *\") print $3}'`" % (region, service)
    out = os.popen(cmd).read().strip()
    print out
    if out:
        urls = out.split("|")
        cmd = "keystone endpoint-delete %s" % urls[1]
        print cmd
        assert os.system(cmd) == 0
        urls = [x.strip() for x in urls[3:6]]
        print urls
    urls[interface_index] = url
    cmd = 'keystone endpoint-create --region %s --service %s --publicurl "%s" --internalurl "%s" --adminurl "%s"' % (region, service, urls[0], urls[1], urls[2])
    if os.system(cmd) == 0:
        return "add endpoint %s successful" % url
    else:
        raise FailException("add endpoint %s fail" % url)


def parse_cmd(cmd):
    output = os.popen(cmd).read().strip()
    return parse_output(output)


def endpoint_list():
    services = parse_cmd("keystone service-list")
    endpoints = parse_cmd("keystone endpoint-list")
    service_dict = {x["Id"]: x for x in services}
    data = []
    for endpoint in endpoints:
        service_id = endpoint["Service_id"]
        other = {
                 "ID": endpoint["Id"],
                 "Service Name": service_dict[service_id]["Name"],
                 "Service Type": service_dict[service_id]["Type"],
                 "Enabled": True,
                 "Region": endpoint["Region"],
                 }
        public = other.copy()
        admin = other.copy()
        internal = other.copy()
        public["Interface"] = "public"
        admin["Interface"] = "admin"
        internal["Interface"] = "internal"
        public["URL"] = endpoint["Publicurl"]
        admin["URL"] = endpoint["Adminurl"]
        internal["URL"] = endpoint["Internalurl"]
        data.extend((public, admin, internal))
    keys = ["ID", "Region", "Service Name", "Service Type", "Enabled",
            "Interface", "URL"]
    ret = ['+-+', '|%s|' % "|".join(keys), '+-+']
    for endpoint in data:
        ret.append('|%s|' % "|".join([str(endpoint[k]) for k in keys]))
    ret.append("+-+")
    return os.linesep.join(ret)





CMD_dict = {
    "region": {
        "list": get_region,
        "create": add_region,
    },
    "service": {
        "create": add_service,
    },
    "endpoint": {
        "list": endpoint_list,
        "create": add_endpoint,
    },
}


def parse_output(text):
    lines = text.splitlines()
    head = lines[1]
    bodies = lines[3:-1]
    keys = [x.strip() for x in head.split("|")[1:-1]]
    keys = [x[0].upper() + x[1:] for x in keys]
    ret = []
    for line in bodies:
        values = [x.strip() for x in line.split("|")[1:-1]]
        assert len(keys) == len(values)
        d = {}
        for i in range(len(keys)):
            value = None if values[i] == "None" or values[i] == "NULL" else\
                    True if values[i] == "True" else\
                    False if values[i] == "False" else values[i]
            d[keys[i]] = value
        ret.append(d)
    return ret


def to_json(text):
    return json.dumps(parse_output(text))


def exec_cmd(args):
    if args.component in CMD_dict and args.sub_cmd in CMD_dict[args.component]:
        return CMD_dict[args.component][args.sub_cmd]()
    else:
        cmd = translate_cmd(args)
        return os.popen(cmd).read().strip()


def translate_cmd(args):
    return "keystone %s-%s " % (args.component, args.sub_cmd)


def main():
    global ARGS
    ARGS = parse_opt()
    output = exec_cmd(ARGS)
    if ARGS.format == "json":
        output = to_json(output)
    print output

if __name__ == "__main__":
    main()
